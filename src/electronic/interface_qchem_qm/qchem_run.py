#! /usr/bin/python

import shutil
import os

from qchem_create import *
from qchem_parser import *

class qchem_run:
    def __init__(self,config={}):
        """
        common data block, cannot be inherted by subclass automatically
        """
        self.config = config
        root_dir = config['root']
        dirs = config['dirs']

        # working directory & files >>>
        self.directory = {}
        self.directory['root'] = root_dir
        self.directory['template'] = root_dir + "/" + dirs['template']
        self.directory['home'] = root_dir + "/" + dirs['home']
        self.directory['work'] = self.directory['home'] + "/" + dirs['work']

        self.files = config['files']

        # run the job directly
        self.worker()

        return

    def initilize(self):
        """
        check interface & determine the implimented module to be called.
        """
        # make directory
        # @ Check & Remove the old working directory for QC calc.
        home_dir = self.directory['home']
        root_dir = self.directory['root']

        if not os.path.exists(home_dir):
            os.makedirs(home_dir)

        # working directory: such as QCHEM_TMP.
        destPath = self.directory['work']
        tempPath = self.directory['template']

        qcscratch_dir = root_dir + '/QCSCRATCH'
        qclocalscr_dir = root_dir + '/QCLOCALSCR'

        wfufile_temp = tempPath + '/' + self.files['qchem_wfu']

        if not os.path.exists(qcscratch_dir):
            os.makedirs(qcscratch_dir)
            shutil.copytree(wfufile_temp, qcscratch_dir+'/save')

        if not os.path.exists(qclocalscr_dir):
            os.makedirs(qclocalscr_dir)

        if os.path.exists(destPath):
            shutil.rmtree(destPath)
        if not os.path.exists(destPath):
            os.makedirs(destPath)

                # copy template & interface
        sourceFile = self.files['template']
        shutil.copy2(sourceFile, destPath)

        sourceFile = self.files['interface']
        if os.path.isfile(sourceFile):
            shutil.copy2(sourceFile, destPath)
        else:
            print 'Check the interface file generated by dynamics code!'
            exit(1)
            #   Enter the QC working directory
        os.chdir(destPath)

        return

    def prepare(self):
        """
        generate qchem input file
        based on template (user) or parameter (auto)
        """
        # read template & create input qchem file
        qchem = qchem_create(self.config)
        qchem.wrt_qchem_input()

        return

    def run(self):
        """
        call the QC code & confirm the running is ok. if not throw error messages.
        """

        jobin = self.files["qchem_input"]
        jobout = self.files["qchem_log"]

        NP = os.environ['OMP_NUM_THREADS']

        exec_name = 'qchem -seq -nt '+ str(NP) +' ' + jobin + ' '+ jobout + '  > log'

        print exec_name

        os.system(exec_name)

        return

    def analyze(self):
        """
        extract data used for surface hopping dynamics., 
        the required QC information was extraced.
        """
        qchem = qchem_parser(self.config)
        qchem.get_log_dat()

        return

    def finalize(self):
        """
        simply clean up the tmp dat. and so on.
        """
        #   Go back to directory of dynamics work
        #   Copy results of QM calculations

        #   Go back to directory of dynamics work
        os.chdir(self.directory['root'])

        home_dir = self.directory['home']
        destPath = self.directory['work']
            #   Copy results of QM calculations
        sourcePath = self.directory['work']
        sourceFile = sourcePath + '/' + 'qm_results.dat'
        destPath = './'
        shutil.copy2(sourceFile, destPath)

        sourceFile = sourcePath + '/' + 'qm_other.dat'
        destPath = './'
        shutil.copy2(sourceFile, destPath)

        print 'Finish QC calculation'

        return

    def worker(self):
        """
        wrap the whole process
        """
        self.initilize()
        self.prepare()
        self.run()
        self.analyze()
        self.finalize()
        return

    # Main Program


if __name__ == "__main__":
    mr = qchem_run()
    mr.worker()
