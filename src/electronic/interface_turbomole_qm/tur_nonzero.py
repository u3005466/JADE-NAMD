#!/usr/bin/python
import os
import sys
from operator import itemgetter
import re
import math
import cre_tur_input_tool
from cre_tur_input_tool import *
import read_tur_tool
from read_tur_tool import *
import shutil





#  ---------------------------------------------------------------------
#  Generate the TDDFT input for Turbomole
#-----------------------------------------------------------------------------------------   



#  Run Turbomle calculation after the time zero
def tur_tddft_time_nonzero () :




#   Copy the old Turbomole output to other directory
    dir="./QC_TMP/TUR_TMP_PREV"
    if os.path.exists(dir):
        shutil.rmtree(dir)

    if not os.path.exists(dir):
        os.makedirs(dir)
    
    
    sourcePath = 'QC_TMP/TUR_TMP'
    destPath =   'QC_TMP/TUR_TMP_PREV'

    

    sourcePath_files = os.listdir(sourcePath)
    for file_name in sourcePath_files:
        full_file_name = os.path.join(sourcePath, file_name)
        if (os.path.isfile(full_file_name)):
           shutil.copy(full_file_name, destPath)


#--------------------------------------------------

    print 'Begin to read Interface between surface-hopping and turbomole'


#   functional selection:
#   0:  Pure functional
#   1:  hybrid functional
    func = 1

    n_atom = 0
    n_state = 0
    index_state = 0 
#   Read the turbomole output
    n_all = read_coord ()
    n_atom = int(n_all[0])
    n_state = int(n_all[1])
    index_state = int(n_all[2])
    print n_atom, n_state, index_state

#   Check the interface file:
    if n_atom == 0  :
       print 'Check the Turbomole interface file'
       raise IOerror
    if n_state == 0 :
       print 'Check the Turbomole interface file'
       raise IOerror
    if index_state == 0 :
       print 'Check the Turbomole interface file'
       raise IOerror




#   Copy new turbomole_interface generated by dynamics code

    interface_File ='turbomole_interface'
    if os.path.isfile(interface_File):
        shutil.copy2(interface_File, sourcePath)
    else :
        print 'Check the Turbomole interface file generated by dynamics code!'
        raise IOerror

#   Remove the old QM results
    qm_resultfile = 'qm_results.dat'
    if os.path.isfile(qm_resultfile):
        os.remove(qm_resultfile)



#   Copy new coord  files
    sourceFile ='coord'
    shutil.copy2(sourceFile, sourcePath)



#   Enter the Turbomole working directory
    os.chdir("./QC_TMP/TUR_TMP")

#   Delete some old files 
    gradfile = 'gradient'
    if os.path.isfile(gradfile):
       os.remove("./gradient")

    files = os.listdir("./")
    for filename in files:
	pos= re.search('dat', filename)      
	if pos is not None:
           os.remove(filename) 		

    files = os.listdir("./")
    for filename in files:
        pos= re.search('out', filename)
        if pos is not None:
           os.remove(filename)




#   Modify the control file
    modify_control (n_atom, n_state, index_state)  



#   Run Turbomole Work
    os.system("dscf > dscf.out" )

    if index_state == 1 :
       os.system("grad > grad.out" )
       os.system("escf > escf.out" )

    if index_state > 1 :
       os.system("egrad > grad.out" )


#   Run Turbomole output 

#   Check whether the calculations finish correctly.

    check_dft()
    check_grad()
    if index_state == 1 :
       check_escf()


#   Read Energies
    read_energy (n_state, index_state)

#   Read Gradient
    read_gradient(n_atom, n_state, index_state)

#   Read Basis
    n_basis_all = read_basis (index_state)
    n_basis = n_basis_all[0]
    n_occ   = n_basis_all[1]
    n_vir   = n_basis_all[2]
    func   =  n_basis_all[3]

#   Read MO
    read_mo (n_basis)

    if  func == 0 :
        read_ci_pure (n_basis, n_occ, n_vir, n_state )
    if  func == 1 :
        read_ci_hybrid (n_basis, n_occ, n_vir, n_state )
    if  func == 2 :
        read_ci_hy_tda (n_basis, n_occ, n_vir, n_state )
    if  func == 3 :
        read_ci_hy_tda (n_basis, n_occ, n_vir, n_state )


    if  func == 10 :
        read_ci_hybrid (n_basis, n_occ, n_vir, n_state )
    if  func == 11 :
        read_ci_hy_tda (n_basis, n_occ, n_vir, n_state )




    collect_qm (n_atom, n_state, index_state)

    read_other (n_state, index_state)

    #   Go back to directory of dynamics work
    os.chdir("../../")
                  
    #   Copy results of QM calculations 
    sourceFile = './QC_TMP/TUR_TMP/qm_results.dat'
    destPath = './'
    shutil.copy2(sourceFile, destPath)

    sourceFile = './QC_TMP/TUR_TMP/qm_other.dat'
    destPath = './'
    shutil.copy2(sourceFile, destPath)


    print 'Finish to read TDDFT output from Turbomole'


if __name__ == "__main__":
    tur_tddft_time_nonzero()




