#! /usr/bin/python

import shutil

from molpro_create import *
from molpro_parser import *


class molpro_run:
    def __init__(self, config={}):
        """
        common data block, cannot be inherted by subclass automatically
        """
        self.directory = {
            "template": "./MOLPRO_EXAM",
            "work": "./QC_TMP/MOLPRO_TMP",
            "home": "./QC_TMP"
        }
        self.files = {
            "template": "template.json",
            "interface": "interface.json",
            "molpro_wfu": "wfu",
            "molpro_input": "molpro.inp",
            "molpro_log": "molpro.log"
        }
        self.config = config

        if config != {}:
            root_dir = config['root']
            dirs = config['dirs']
            files = config['files']

            # working directory & files >>>
            self.directory = {}
            self.directory['root'] = root_dir
            self.directory['template'] = root_dir + "/" + dirs['template']
            self.directory['home'] = root_dir + "/" + dirs['home']
            self.directory[
                'work'] = self.directory['home'] + "/" + dirs['work']
            self.files = {}
            self.files["template"] = files['template']
            self.files["interface"] = files['interface']
            self.files["molpro_wfu"] = files['molpro_wfu']
            self.files["molpro_input"] = files['molpro_input']
            self.files["molpro_log"] = files['molpro_log']

            # run the job directly
            self.worker()

        return

    def initilize(self):
        """
        check interface & determine the implimented module to be called.
        """
        # make directory
        # @ Check & Remove the old working directory for QC calc.
        home_dir = self.directory['home']

        if not os.path.exists(home_dir):
            os.makedirs(home_dir)

        # working directory: such as MOLPRO_TMP.
        destPath = self.directory['work']
        tempPath = self.directory['template']

        wfufile_temp = tempPath + '/' + self.files['molpro_wfu']
        wfufile_dyn = home_dir + '/' + self.files['molpro_wfu']

        if os.path.exists(destPath):
            shutil.rmtree(destPath)
        if not os.path.exists(destPath):
            os.makedirs(destPath)
            wfu_dir = destPath + '/wfu'
            os.makedirs(wfu_dir)

            if os.path.isfile(wfufile_dyn):
                shutil.copy2(wfufile_dyn, wfu_dir)
            elif os.path.isfile(wfufile_temp):
                shutil.copy2(wfufile_temp, wfu_dir)
            else:
                print "No wavefuncton file, exit!"
                exit(1)

                # copy template & interface
        sourceFile = self.files['template']
        shutil.copy2(sourceFile, destPath)

        sourceFile = self.files['interface']
        if os.path.isfile(sourceFile):
            shutil.copy2(sourceFile, destPath)
        else:
            print 'Check the interface file generated by dynamics code!'
            exit(1)
            #   Enter the QC working directory
        os.chdir(destPath)

        return

    def prepare(self):
        """
        generate molpro input file
        based on template (user) or parameter (auto)
        """
        # read template & create input molpro file
        molpro = molpro_create(self.config)
        molpro.wrt_molpro_input()

        return

    def run(self):
        """
        call the QC code & confirm the running is ok. if not throw error messages.
        """

        exec_name = self.config['command']['molpro']
        jobin = self.files["molpro_input"]
        jobout = self.files["molpro_log"]

        #        exec_name1 = exec_name + " < " + jobin + " > " + jobout
        exec_name = exec_name + " -d ./tmp" + " -W ./wfu " + jobin + ' -o ' + jobout
        #exec_name = exec_name + " -d ./tmp" + " -W ./wfu " + "-n 2 "+ jobin + ' -o ' + jobout
        os.system(exec_name)
        return

    def analyze(self):
        """
        extract data used for surface hopping dynamics., 
        the required QC information was extraced.
        """
        molpro = molpro_parser(self.config)
        molpro.get_log_dat()

        return

    def finalize(self):
        """
        simply clean up the tmp dat. and so on.
        """
        #   Go back to directory of dynamics work
        #   Copy results of QM calculations

        #   Go back to directory of dynamics work
        os.chdir(self.directory['root'])

        home_dir = self.directory['home']
        destPath = self.directory['work']
        wfufile = destPath + '/wfu/' + self.files['molpro_wfu']
        if os.path.isfile(wfufile):
            shutil.copy2(wfufile, home_dir)

            #   Copy results of QM calculations
        sourcePath = self.directory['work']
        sourceFile = sourcePath + '/' + 'qm_results.dat'
        destPath = './'
        shutil.copy2(sourceFile, destPath)

        #        sourceFile = sourcePath + '/' + 'qm_other.dat'
        #        destPath = './'
        #        shutil.copy2(sourceFile, destPath)

        print 'Finish QC calculation'

        return

    def worker(self):
        """
        wrap the whole process
        """
        self.initilize()
        self.prepare()
        self.run()
        self.analyze()
        self.finalize()
        return

    # Main Program


if __name__ == "__main__":
    mr = molpro_run()
    mr.worker()
